title: Xcode Archive for Mac
summary: |-
  Create an archive for your OS X project so you can share it, upload it, deploy it and catch them
  all! Well, maybe not the last one.
description: ""
website: https://github.com/bitrise-steplib/steps-xcode-archive-mac
source_code_url: https://github.com/bitrise-steplib/steps-xcode-archive-mac
support_url: https://github.com/bitrise-steplib/steps-xcode-archive-mac/issues
published_at: 2018-01-17T15:43:38.459231+01:00
source:
  git: https://github.com/bitrise-steplib/steps-xcode-archive-mac.git
  commit: a9f048805a64827952fe74b765e9360df24aee5f
host_os_tags:
- osx-10.10
project_type_tags:
- macos
type_tags:
- build
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-archive-mac
deps:
  brew:
  - name: go
  check_only:
  - name: xcode
is_requires_admin_user: false
is_always_run: false
is_skippable: false
run_if: ""
inputs:
- export_method: development
  opts:
    category: app/pkg export configs
    description: |-
      The method for exporting the application.

      - `development`: Save a copy of the application signed with your Development identity.
      - `app-store`: Sign and package application for distribution in the Mac App Store.
      - `developer-id`: Save a copy of the application signed with your Developer ID.
      - `none`: Export a copy of the application without re-signing.

      See `xcodebuild -help` for more information.
    is_required: true
    title: Export method
    value_options:
    - development
    - app-store
    - developer-id
    - none
- custom_export_options_plist_content: null
  opts:
    category: app/pkg export configs
    description: |-
      Used for Xcode version 7 and above.

      Specifies a custom export options plist content that configures archive exporting.
      If empty, the step generates these options based on provisioning profile,
      with default values.

      Auto generated export options available for export methods:

      - app-store
      - ad-hoc
      - enterprise
      - development

      If the step doesn't find an export method based on the provisioning profile(s), the development method will be used.

      Call `xcodebuild -help` for available export options.
    title: Custom export options plist content
- opts:
    category: xcodebuild configs
    description: |
      A `.xcodeproj` or `.xcworkspace` path.
    is_required: true
    summary: ""
    title: Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    category: xcodebuild configs
    description: |
      The Scheme to use.
    is_required: true
    summary: ""
    title: Scheme name
  scheme: $BITRISE_SCHEME
- configuration: null
  opts:
    category: xcodebuild configs
    description: |
      (optional) The configuration to use. By default, your Scheme
      defines which configuration (Debug, Release, ...) should be used,
      but you can overwrite it with this option.
      **Make sure that the Configuration you specify actually exists
      in your Xcode Project**. If it does not (for example, if you have a typo
      in the value of this input) Xcode will simply use the Configuration
      specified by the Scheme and will silently ignore this parameter!
    summary: ""
    title: Configuration name
- is_clean_build: "yes"
  opts:
    category: xcodebuild configs
    is_required: true
    title: Do a clean Xcode build before the archive?
    value_options:
    - "yes"
    - "no"
- opts:
    category: xcodebuild configs
    description: |
      Working directory of the step.
      You can leave it empty to don't change it.
    summary: ""
    title: Working directory
  workdir: $BITRISE_SOURCE_DIR
- force_team_id: null
  opts:
    category: force archive codesign settings
    description: |-
      Used for Xcode version 8 and above.

      Force xcodebuild to use the specified Developer Portal team during archive.

      Format example:

      - `1MZX23ABCD4`
    title: Force Developer Portal team to use during archive
- force_code_sign_identity: null
  opts:
    category: force archive codesign settings
    description: |-
      Force xcodebuild to use the specified Code Signing Identity.

      Specify code signing identity as full ID (e.g. `Mac Developer: Bitrise Bot (VV2J4SV8V4)`)
      or specify code signing group ( `Mac Developer` or `Mac Distribution` ).

      You also have to **specify the Identity in the format it's stored in the Xcode project settings**,
      and **not how it's presented in the Xcode.app GUI**!
      **The input is case sensitive**: `Mac Distribution` works but `mac distribution` does not!
    title: Force code signing with Identity
- force_provisioning_profile_specifier: null
  opts:
    category: force archive codesign settings
    description: |-
      Used for Xcode version 8 and above.

      Force xcodebuild to use the specified Provisioning Profile.

      How to get your Provisioning Profile Specifier:

      - In Xcode make sure you disabled `Automatically manage signing` on your project's `General` tab
      - Now you can select your Provisioning Profile Specifier's name as `Provisioning Profile` input value on your project's `General` tab
      - `force_provisioning_profile_specifier` input value build up by the Team ID and the Provisioning Profile Specifier name, separated with slash character ('/'): `TEAM_ID/PROFILE_SPECIFIER_NAME`

      Format example:

      - `1MZX23ABCD4/My Provisioning Profile`
    title: Force code signing with Provisioning Profile Specifier
- force_provisioning_profile: null
  opts:
    category: force archive codesign settings
    description: |-
      Force xcodebuild to use specified Provisioning Profile.

      Use Provisioning Profile's UUID, profile's name is not acceptable by xcodebuild.

      How to get your UUID:

      - In xcode select your project -> Build Settings -> Code Signing
      - Select the desired Provisioning Profile, then scroll down in profile list and click on Other...
      - The popup will show your profile's UUID.

      Format example:

      - c5be4123-1234-4f9d-9843-0d9be985a068
    title: Force code signing with Provisioning Profile
- opts:
    category: step output configs
    description: |-
      If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
      If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
    is_required: true
    title: Output tool
    value_options:
    - xcpretty
    - xcodebuild
  output_tool: xcpretty
- opts:
    category: step output configs
    description: |
      This directory will contain the generated .app or .pkg file's and .dSYM.zip files.
    summary: ""
    title: Output directory path
  output_dir: $BITRISE_DEPLOY_DIR
- artifact_name: ${scheme}
  opts:
    category: step output configs
    description: This name will be used as basename for the generated .xcarchive,
      .app or .pkg and .dSYM.zip files.
    is_required: true
    title: Generated Artifact Name
- is_export_xcarchive_zip: "no"
  opts:
    category: step output configs
    description: |
      If this input is set to `yes`, the generated .xcarchive will be zipped and moved to `output_dir`.
    is_required: true
    title: Export the generated archive?
    value_options:
    - "yes"
    - "no"
- is_export_all_dsyms: "no"
  opts:
    category: step output configs
    description: |-
      If this input is set to `yes` step will collect every dsym (.app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
      Otherwise only .app dsym will be zipped and the zip path exported.
    is_required: true
    title: Export all dsyms?
    value_options:
    - "yes"
    - "no"
- opts:
    category: step output configs
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "no"
outputs:
- BITRISE_EXPORTED_FILE_PATH: null
  opts:
    title: The created .app.zip or .pkg file's path
- BITRISE_APP_PATH: null
  opts:
    title: The created .app path
- BITRISE_DSYM_PATH: null
  opts:
    title: The created .dSYM.zip file's path
- BITRISE_XCARCHIVE_PATH: null
  opts:
    title: The created .xcarchive.zip file's path
- BITRISE_MACOS_XCARCHIVE_PATH: null
  opts:
    title: The created .xcarchive dir's path
