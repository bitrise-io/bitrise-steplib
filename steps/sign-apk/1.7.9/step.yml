title: Android Sign
summary: Signs your APK or Android App Bundle before uploading it to Google Play Store.
description: |-
  Once you have uploaded your keystore file and provided your keystore credentials on the **Code Signing** tab of the Workflow Editor, the **Android Sign** Step signs your APK digitally.
  Bitrise assigns Environment Variables to the uploaded file and credentials, and uses those in the respective fields of the **Android Sign** Step.
  Once the Step runs, it produces a signed APK or App Bundle which will be used as the input value of the **App file path** field in the **Google Play Deploy** Step.

  ### Configuring the Step

  1. Add the **Android Sign** Step after a build Step in your deploy workflow.
  2. Upload the keystore file to the **Upload file** field on the **Code Signing** tab.
  3. Provide your keystore password, keystore alias and private key password to the relevant fields on the **Code Signing** tab.
  4. Run your build.

  ### Troubleshooting
  Make sure you have the **Android Sign** Step right after a build Steps but before **Deploy to Google Play** Step in your deploy workflow.
  If you wish to get your Android project signed automatically, use the **Android Sign** Step and do not set any gradle task for the signing, otherwise, the Step will fail.

  ### Useful links
  - [Android code signing using Android Sign Step](https://devcenter.bitrise.io/code-signing/android-code-signing/android-code-signing-using-bitrise-sign-apk-step/)
  - [Android deployment](https://devcenter.bitrise.io/deploy/android-deploy/android-deployment-index/)

  ### Related Steps
  - [Android Build](https://www.bitrise.io/integrations/steps/android-build)
  - [Gradle Runner](https://www.bitrise.io/integrations/steps/gradle-runner)
  - [Deploy to Bitrise.io](https://www.bitrise.io/integrations/steps/deploy-to-bitrise-io)
website: https://github.com/bitrise-steplib/steps-sign-apk
source_code_url: https://github.com/bitrise-steplib/steps-sign-apk
support_url: https://github.com/bitrise-steplib/steps-sign-apk/issues
published_at: 2022-08-26T13:53:11.481434665Z
source:
  git: https://github.com/bitrise-steplib/steps-sign-apk.git
  commit: 99622883b486f181dfd8fa5aa8d02c5b6347225d
host_os_tags:
- osx-10.10
- ubuntu
project_type_tags:
- android
- xamarin
- react-native
- cordova
- ionic
type_tags:
- code-sign
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-sign-apk
is_requires_admin_user: false
is_always_run: false
is_skippable: false
inputs:
- android_app: $BITRISE_APK_PATH\n$BITRISE_AAB_PATH
  opts:
    description: |-
      Path(s) to the build artifact file to sign (`.aab` or `.apk`).

      You can provide multiple build artifact file paths separated by `|` character.

      Format examples:

      - `/path/to/my/app.apk`
      - `/path/to/my/app1.apk|/path/to/my/app2.apk|/path/to/my/app3.apk`

      - `/path/to/my/app.aab`
      - `/path/to/my/app1.aab|/path/to/my/app2.apk|/path/to/my/app3.aab`
    is_required: true
    summary: '`Android App Bundle (.aab)` or `Android Application Package (.apk)`'
    title: App file path.
- keystore_url: $BITRISEIO_ANDROID_KEYSTORE_URL
  opts:
    description: |-
      For remote keystores you can provide any download location (e.g. `https://URL/TO/keystore.jks`).
      For local keystores provide file path url. (e.g. `file://PATH/TO/keystore.jks`).
    is_required: true
    is_sensitive: true
    title: Keystore url
- keystore_password: $BITRISEIO_ANDROID_KEYSTORE_PASSWORD
  opts:
    is_required: true
    is_sensitive: true
    title: Keystore password
- keystore_alias: $BITRISEIO_ANDROID_KEYSTORE_ALIAS
  opts:
    is_required: true
    is_sensitive: true
    title: Key alias
- opts:
    description: |
      If key password equals to keystore password (not recommended), you can leave it empty.
      Otherwise specify the private key password.
    is_sensitive: true
    title: Key password
  private_key_password: $BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD
- opts:
    description: |
      If enabled, it tells zipalign to use memory page alignment for stored shared object files.

      - `automatic`: Enable page alignment for .so files, unless atribute `extractNativeLibs="true"` is set in the AndroidManifest.xml
      - `true`: Enable memory page alignment for .so files
      - `false`: Disable memory page alignment for .so files
    is_required: true
    title: Page alignment
    value_options:
    - "true"
    - "false"
    - automatic
  page_align: automatic
- opts:
    description: Indicates if the signature should be done using `apksigner` instead
      of `jarsigner`.
    is_required: true
    title: Enables apksigner
    value_options:
    - "true"
    - "false"
  use_apk_signer: "false"
- opts:
    description: |
      If set, enforces which Signature Scheme should be used by the project.

      - `automatic`: The tool uses the values of `--min-sdk-version` and `--max-sdk-version` to decide when to apply this Signature Scheme.
      - `v2`: Sets `--v2-signing-enabled` true, and determines whether apksigner signs the given APK package using the APK Signature Scheme v2.
      - `v3`: Sets `--v3-signing-enabled` true, and determines whether apksigner signs the given APK package using the APK Signature Scheme v3.
      - `v4`: Sets `--v4-signing-enabled` true, and determines whether apksigner signs the given APK package using the APK Signature Scheme v4. This scheme produces a signature in an separate file (apk-name.apk.idsig). If true and the APK is not signed, then a v2 or v3 signature is generated based on the values of `--min-sdk-version` and `--max-sdk-version`.
    is_required: true
    title: APK Signature Scheme
    value_options:
    - automatic
    - v2
    - v3
    - v4
  signer_scheme: automatic
- debuggable_permitted: "true"
  opts:
    description: |
      Whether to permit signing `android:debuggable="true"` APKs. Android disables some of its security protections for such apps.
    is_required: true
    title: Enable debuggable APKs
    value_options:
    - "true"
    - "false"
- opts:
    description: |
      If is empty then the output name is `app-release-bitrise-signed`.
      Else it's the specified name. Do not add the file extension here.
    summary: Name of the produced output artifact
    title: Artifact name
  output_name: ""
- opts:
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "true"
    - "false"
  verbose_log: "false"
- apk_path: null
  opts:
    category: Deprecated
    description: |-
      __This input is deprecated and will be removed on 20 August 2019, use `App file path` input instead!__

      Path(s) to the build artifact file to sign (`.aab` or `.apk`).

      You can provide multiple build artifact file paths separated by `|` character.

      Deprecated, use `android_app` instead.

      Format examples:

      - `/path/to/my/app.apk`
      - `/path/to/my/app1.apk|/path/to/my/app2.apk|/path/to/my/app3.apk`

      - `/path/to/my/app.aab`
      - `/path/to/my/app1.aab|/path/to/my/app2.apk|/path/to/my/app3.aab`
    summary: '`Android App Bundle (.aab)` or `Android Aplication Package (.apk)`.
      Deprecated, use `android_app` instead.'
    title: '[DEPRECATED] Build artifact path.'
outputs:
- BITRISE_SIGNED_APK_PATH: null
  opts:
    description: |-
      This output will include the path of the signed APK.
      If the build generates more than one APK this output will contain the last one's path.
    summary: Path of the signed APK
    title: Path of the signed APK
- BITRISE_SIGNED_APK_PATH_LIST: null
  opts:
    description: |-
      This output will include the paths of the generated APKs
      If multiple APKs are provided for signing the output paths are separated with `|` character, for example, `app-armeabi-v7a-debug.apk|app-mips-debug.apk|app-x86-debug.apk`
    summary: List of the signed (and copied) APK paths
    title: List of the signed APK paths
- BITRISE_SIGNED_AAB_PATH: null
  opts:
    description: |-
      This output will include the path of the signed AAB.
      If the build generates more than one AAB this output will contain the last one's path.
    summary: Path of the signed AAB
    title: Path of the signed AAB
- BITRISE_SIGNED_AAB_PATH_LIST: null
  opts:
    description: |-
      This output will include the paths of the generated AABs.
      If multiple AABs are provided for signing the output paths are separated with `|` character, for example, `app-armeabi-v7a-debug.aab|app-mips-debug.aab|app-x86-debug.aab`
    summary: List of the signed (and copied) AAB paths
    title: List of the signed AAB paths
- BITRISE_APK_PATH: null
  opts:
    description: |-
      This output will include the path(s) of the signed APK(s).
      If multiple APKs are provided for signing the output paths are separated with `|` character, for example, `app-armeabi-v7a-debug.apk|app-mips-debug.apk|app-x86-debug.apk`
    summary: Path of the signed APK
    title: Path of the signed APK
- BITRISE_AAB_PATH: null
  opts:
    description: |-
      This output will include the path(s) of the signed AAB(s).
      If multiple AABs are provided for signing the output paths are separated with `|` character, for example, `app-armeabi-v7a-debug.aab|app-mips-debug.aab|app-x86-debug.aab`
    summary: Path of the signed AAB
    title: Path of the signed AAB
