title: Git Clone Repository
summary: The Step checks out the defined repository state, optionally updates the
  repository submodules and exports the achieved git repository state properties.
description: |
  The checkout process depends on the checkout properties: the Step either checks out a repository state defined by a git commit or a git tag, or achieves a merged state of a pull / merge request.
  The Step uses two solutions to achieve the merged state of the pull / merge request: auto merge in the case of a merge branch or diff file (provided by the Git service) and manual merge otherwise.
  Once the desired state is checked out, the Step optionally updates the submodules. In the case of pull / merge request, the Step checks out a detach head and exports the achieved git state properties.

  ### Configuring the Step

  1. The **Git repository URL** and the ** Clone destination (local)directory path** fields are required fields and are automatically filled out based on your project settings.
  Optionally, you can modify the following fields in the **Clone Config** section:
  1. You can set the **Update the registered submodules?** option to `yes` to pull the most up-to-date version of the submodule from the submodule's repository.
  2. You can set the number of commits you want the Step to fetch in the **Limit fetching to the specified number of commits** option. Make sure you set a decimal number.

  Other **Clone config** inputs are not editable unless you go to the **bitrise.yml** tab, however, to avoid issues, we suggest you to contact our Support team instead.

  ### Troubleshooting
  If you have GitHub Enterprise set up, it works slightly differently on [bitrise.io](https://www.bitrise.io) than on [github.com](https://github.com). You have to manually set the git clone URL, register the SSH key and the webhook.
  If you face network issues in the case of self-hosted git servers, we advise you to contact our Support Team to help you out.
  If you face slow clone speed, set the **Limit fetching to the specified number of commits** to the number of commits you want to clone instead of cloning the whole commit history or you can use the Git LFS solution provided by the git provider.

  ### Useful links

  - [How to register a GitHub Enterprise repository](https://discuss.bitrise.io/t/how-to-register-a-github-enterprise-repository/218)
  - [Code security](https://devcenter.bitrise.io/getting-started/code-security/)

  ### Related Steps

  - [Activate SSH key (RSA private key)](https://www.bitrise.io/integrations/steps/activate-ssh-key)
  - [Bitrise.io Cache:Pull](https://www.bitrise.io/integrations/steps/cache-pull)
  - [Bitrise.io Cache:Push](https://www.bitrise.io/integrations/steps/cache-push)
website: https://github.com/bitrise-steplib/steps-git-clone
source_code_url: https://github.com/bitrise-steplib/steps-git-clone
support_url: https://github.com/bitrise-steplib/steps-git-clone/issues
published_at: 2023-02-06T22:20:49.466658422Z
source:
  git: https://github.com/bitrise-steplib/steps-git-clone.git
  commit: b1bf5cbb9d54df0330b30813f173e6055ce8f093
type_tags:
- utility
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-git-clone
deps:
  brew:
  - name: git-lfs
  apt_get:
  - name: git-lfs
is_requires_admin_user: false
is_always_run: false
is_skippable: false
run_if: .IsCI
inputs:
- opts:
    is_dont_change_value: true
    is_required: true
    title: Git repository URL
  repository_url: $GIT_REPOSITORY_URL
- clone_into_dir: $BITRISE_SOURCE_DIR
  opts:
    is_required: true
    title: Clone destination (local) directory path
- commit: $BITRISE_GIT_COMMIT
  opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Git Commit to clone
- opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Git Tag to clone
  tag: $BITRISE_GIT_TAG
- branch: $BITRISE_GIT_BRANCH
  opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Git branch to clone
- branch_dest: $BITRISEIO_GIT_BRANCH_DEST
  opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Destination git branch, used for pull requests
- opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Pull request ID on GitHub
  pull_request_id: $PULL_REQUEST_ID
- opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Pull request git URL
  pull_request_repository_url: $BITRISEIO_PULL_REQUEST_REPOSITORY_URL
- opts:
    category: Clone arguments
    is_dont_change_value: true
    title: Merged pull request branch
  pull_request_merge_branch: $BITRISEIO_PULL_REQUEST_MERGE_BRANCH
- opts:
    category: Clone arguments
    description: |-
      If the Git hosting provider system supports and provides this,
      this special git ref should point to the source of the pull request.
    is_dont_change_value: true
    title: Pull request head branch
  pull_request_head_branch: $BITRISEIO_PULL_REQUEST_HEAD_BRANCH
- opts:
    category: Checkout options
    description: |-
      Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules.
      If set to "no" `git fetch` calls will get the `--no-recurse-submodules` flag.
    title: Update the registered submodules?
    value_options:
    - "yes"
    - "no"
  update_submodules: "yes"
- clone_depth: null
  opts:
    category: Checkout options
    description: |-
      Limit fetching to the specified number of commits.
      The value should be a decimal number, for example `10`.
    title: Limit fetching to the specified number of commits
- opts:
    category: Checkout options
    description: |-
      Truncate the history to the specified number of revisions.
      The value should be a decimal number, for example `10`.
    title: Submodule update depth
  submodule_update_depth: null
- merge_pr: "yes"
  opts:
    category: Checkout options
    description: |-
      Disables merging the source and destination branches.
      - `yes`: The default setting. Merges the source branch into the destination branch.
      - `no`: Treats Pull Request events as Push events on the source branch.
    summary: Allows to validate a temporary merged state.
    title: Merge the Pull Request source branch into destination
    value_options:
    - "yes"
    - "no"
- opts:
    category: Checkout options
    description: |-
      Limit which directories should be cloned during the build. This could be useful if a repository contains multiple platforms, so called monorepositories, and the build is only targeting a single platform.
      For example, specifying "src/android" the Step will only clone:
      - contents of the root directory and
      - contents of the "src/android" directory and all subdirectories of "src/android".
      On the other hand, "src/ios" and any other directories will not be cloned.
    title: Specify which directories to clone.
  sparse_directories: ""
- opts:
    category: Debug
    summary: Reset repository contents with git reset --hard HEAD and git clean -f
      after repository updated.
    title: Reset repository
    value_options:
    - "No"
    - "Yes"
  reset_repository: "No"
- manual_merge: "yes"
  opts:
    category: Debug
    description: |-
      Prefer to do a manual `git merge` by default.
      When the Pull Request is from a GitHub or Bitbucket private fork repository set this to `no`.
    summary: Prefer to do a manual `git merge` by default.
    title: Manual merge
    value_options:
    - "yes"
    - "no"
- fetch_tags: "no"
  opts:
    category: Clone Config
    description: |-
      yes - fetch all tags from the remote by adding `--tags` flag to git fetch calls
      no - disable automatic tag following by adding `--no-tags` flag to git fetch calls
    title: Should the Step fetch tags?
    value_options:
    - "yes"
    - "no"
- build_url: $BITRISE_BUILD_URL
  opts:
    category: Debug
    description: Unique build URL of this build on Bitrise.io
    is_dont_change_value: true
    summary: Unique build URL of this build on Bitrise.io
    title: Bitrise Build URL
- build_api_token: $BITRISE_BUILD_API_TOKEN
  opts:
    category: Debug
    description: The build's API Token for the build on Bitrise.io
    is_dont_change_value: true
    is_sensitive: true
    summary: The build's API Token for the build on Bitrise.io
    title: Bitrise Build API Token
outputs:
- GIT_CLONE_COMMIT_HASH: null
  opts:
    title: Cloned git commit's commit hash
- GIT_CLONE_COMMIT_MESSAGE_SUBJECT: null
  opts:
    title: Cloned git commit's message subject
- GIT_CLONE_COMMIT_MESSAGE_BODY: null
  opts:
    title: Cloned git commit's message body
- GIT_CLONE_COMMIT_COUNT: null
  opts:
    description: |-
      Count will only work properly if no `--depth` option is set.

      If `--depth` is set then the history truncated to the specified number of commits. Count will **not** fail but will be the clone depth.
    title: Cloned git commit counts
- GIT_CLONE_COMMIT_AUTHOR_NAME: null
  opts:
    title: Cloned git commit's author name
- GIT_CLONE_COMMIT_AUTHOR_EMAIL: null
  opts:
    title: Cloned git commit's author email address
- GIT_CLONE_COMMIT_COMMITTER_NAME: null
  opts:
    title: Cloned git commit's committer name
- GIT_CLONE_COMMIT_COMMITTER_EMAIL: null
  opts:
    title: Cloned git commit's committer email
