title: '[BETA] Xcode Build for testing for iOS'
summary: Performs xcodebuild's build-for-testing action
description: "The Step runs Xcode's `xcodebuild` command with the `build-for-testing`
  option. This builds your app for testing and also creates an `.xctestrun` file.
  \n\n### Configuring the Step \n\nAt a minimum, the Step needs valid values for three
  inputs:\n\n- **Project (or Workspace) path**: This is the path to the `.xcodeproj`
  or `.xcworkspace` file. In most cases, leave it on the default value.\n- **Scheme
  name**: The name of your Xcode scheme. By default, the Step will use the scheme
  that was set when you added the app on Bitrise.\n- **Device destination**: The device
  and platform type to build the tests for. For available values call, `man xcodebuild`
  and check the Destinations section. \nWe also recommend checking out our [System
  reports page](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports)
  on GitHub: you can check out the available, pre-installed simulators and other tools.
  \n\nOptionally, you can define the configuration to use in the **Configuration name**
  input. Normally, the scheme defines the configuration type, such as **debug** or
  **release**.\n\nThe Step can also cache your Swift PM dependencies. To enable caching,
  make sure the **Enable caching of Swift Package Manager packages** input is set
  to `swift_packages`.\n\n### Troubleshooting\n\nIn the **Debug** option group, you
  can:\n\n- Add additional flags to the `xcodebuild` command. \n- Enable verbose logging.\n-
  Change the output directory path and the output tool.\n\n### Useful links\n\n- [Running
  Xcode tests](https://devcenter.bitrise.io/testing/running-xcode-tests/)\n- [Building
  from the Command Line with Xcode](https://developer.apple.com/library/archive/technotes/tn2339/_index.html)\n\n###
  Related Steps \n\n- [Xcode Test for iOS](https://www.bitrise.io/integrations/steps/xcode-test)\n-
  [Xcode Analyze](https://www.bitrise.io/integrations/steps/xcode-analyze)"
website: https://github.com/bitrise-steplib/steps-xcode-build-for-test
source_code_url: https://github.com/bitrise-steplib/steps-xcode-build-for-test
support_url: https://github.com/bitrise-steplib/steps-xcode-build-for-test/issues
published_at: 2021-07-22T09:42:26.22813327Z
source:
  git: https://github.com/bitrise-steplib/steps-xcode-build-for-test.git
  commit: 1cdbc506262b55b3a448557b0f0f2e1d2f907c0c
project_type_tags:
- ios
- react-native
- cordova
- ionic
type_tags:
- build
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-build-for-test
deps:
  check_only:
  - name: xcode
inputs:
- opts:
    description: A `.xcodeproj` or `.xcworkspace` path.
    is_required: true
    summary: A `.xcodeproj` or `.xcworkspace` path.
    title: Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: The Scheme to use.
    is_required: true
    summary: The Scheme to use.
    title: Scheme name
  scheme: $BITRISE_SCHEME
- configuration: Debug
  opts:
    description: |-
      (optional) The configuration to use. By default your Scheme
      defines which configuration (Debug, Release, ...) should be used,
      but you can overwrite it with this option.
      **Make sure that the Configuration you specify actually exists
      in your Xcode Project**. If it does not, if you have a typo
      in the value of this input Xcode will simply use the Configuration
      specified by the Scheme and will silently ignore this parameter!
    title: Configuration name
- destination: generic/platform=iOS
  opts:
    description: |-
      Specify destination to build the testes for.
      For available values call: `man xcodebuild` and check the _Destinations_ section.
    is_required: true
    title: Device destination
- disable_index_while_building: "yes"
  opts:
    description: |-
      Could make the build faster by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command which will disable the indexing during the build.

      Indexing is needed for

      * Autocomplete
      * Ability to quickly jump to definition
      * Get class and method help by alt clicking.

      Which are not needed in CI environment.

      **Note:** In Xcode you can turn off the `Index-WhileBuilding` feature  by disabling the `Enable Index-WhileBuilding Functionality` in the `Build Settings`.<br/>
      In CI environment you can disable it by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command.
    summary: Could make the build faster by disabling the indexing during the build
      run.
    title: Disable indexing during the build
    value_options:
    - "yes"
    - "no"
- cache_level: swift_packages
  opts:
    description: |-
      Available options:
      - `none` : Disable caching
      - `swift_packages` : Cache Swift PM packages added to the Xcode project
    is_required: true
    title: Enable caching of Swift Package Manager packages
    value_options:
    - none
    - swift_packages
- opts:
    category: Debug
    description: |-
      Options added to the end of the xcodebuild call.
      You can use multiple options, separated by a space
      character. Example: `-xcconfig PATH -verbose`
    title: Additional options for xcodebuild call
  xcodebuild_options: ""
- opts:
    category: Debug
    description: This directory will contain the generated .app artifacts.
    is_required: true
    summary: ""
    title: Output directory path
  output_dir: $BITRISE_DEPLOY_DIR
- opts:
    category: Debug
    description: |-
      If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
      If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
    is_expand: false
    is_required: true
    title: Output tool
    value_options:
    - xcpretty
    - xcodebuild
  output_tool: xcpretty
- opts:
    category: Debug
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "no"
outputs:
- BITRISE_TEST_DIR_PATH: null
  opts:
    title: 'Path to the built test directory (example: PROJECT_DERIVED_DATA/Build/Products/Debug-iphoneos)'
- BITRISE_XCTESTRUN_FILE_PATH: null
  opts:
    title: 'Path to the built xctestrun file (example: PROJECT_DERIVED_DATA/Build/Products/ios-simple-objc_iphoneos12.0-arm64e.xctestrun)'
- BITRISE_TEST_BUNDLE_ZIP_PATH: null
  opts:
    title: The built test directory and the built xctestrun file compressed as a single
      zip
- BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH: null
  opts:
    description: |-
      This is the path of the raw build results log file.
      If `output_tool=xcpretty` and the build fails this log will contain the build output.
    title: The full, raw build output file path
