title: Xcode Build for Simulator
summary: Runs `xcodebuild` commands for simulators
description: |
  This Step runs the `xcodebuild` command to build and deploy an app to an iOS, tvOS, or watchOS simulator. You can use this to perform quick tests of your app, or to show it off in a browser to your clients.

  The Step generates the following outputs:

  - `BITRISE_APP_DIR_PATH`: The path to the generated `.app` file.
  - `BITRISE_APP_DIR_PATH_LIST`: The path to the generated `.app` file, and the paths to every dependent target app.
    (Paths are separated by the `|` (pipe) character.)
  - `BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH`: The path to the raw log file for the build.

  The Step also creates an `.xctestrun` file which you can use to run tests.

  Make sure to include this Step after the Steps that install the necessary dependencies — such as _Run Cocoapods Install_ — in your Workflow.

  ### Configuring the Step

  Minimum configuration:

  1. In the **Project path** input, enter the path to your Xcode Project or Workspace.
    (Only necessary if you plan to use a different scheme than the one set in the `BITRISE_PROJECT_PATH` Environment Variable.)
  1. In the **Scheme** input, enter the name of the Scheme you'd like to use for building your project.
    (Only necessary if you plan to use a different scheme than the one set in the `BITRISE_SCHEME` Environment Variable.)

  For more configuration options, see the descriptions of other inputs in the `step.yml` or in the Workflow Editor.

  ### Useful links

  - [Deploying an iOS app for simulators](https://devcenter.bitrise.io/en/deploying/ios-deployment/deploying-an-ios-app-for-simulators.html)

  ### Related Steps

  - [Xcode build for testing for iOS](https://www.bitrise.io/integrations/steps/xcode-build-for-test)
  - [Appetize.io deploy](https://www.bitrise.io/integrations/steps/appetize-deploy)
website: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator
source_code_url: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator
support_url: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator/issues
published_at: 2023-02-08T18:09:43.972734124Z
source:
  git: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator.git
  commit: c86330cd1d64d6d6db6cf312c80d4b7d33507fcc
project_type_tags:
- ios
- react-native
- cordova
- ionic
type_tags:
- build
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-build-for-simulator
inputs:
- opts:
    description: |-
      Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.

      _xcodebuild steps:_

      The input value sets xcodebuild's `-project` or `-workspace` option.
    is_required: true
    summary: Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
    title: Project path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: |-
      Xcode Scheme name.

      _xcodebuild steps:_

      The input value sets xcodebuild's `-scheme` option.
    is_required: true
    summary: Xcode Scheme name.
    title: Scheme
  scheme: $BITRISE_SCHEME
- opts:
    description: |-
      Set this exactly as it appears in the device selection menu in Xcode's device selection UI.

      A couple of examples (the actual available options depend on which versions are installed):

      * iPhone 8 Plus
      * iPhone Xs Max
      * iPad Air (3rd generation)
      * iPad Pro (12.9-inch) (3rd generation)
      * Apple TV 4K

      Don't forget to set the platform to `tvOS Simulator` in order to use an Apple TV simulator.
    is_required: true
    summary: The simulated device to use when building
    title: Device Model
  simulator_device: iPhone 8 Plus
- opts:
    description: |-
      Set this exactly as it appears in Xcode's device selection UI.

      A couple of format examples (the actual available options depend on which versions are installed):

      * "8.4"
      * latest
    is_required: true
    summary: The OS version to build for
    title: OS Version
  simulator_os_version: latest
- opts:
    description: |-
      Set this exactly as it appears in Xcode's device selection UI.

      A couple of examples (the actual available options depend on which versions are installed):

      * iOS Simulator
      * tvOS Simulator
    is_required: true
    summary: The platform to build for (iOS or tvOS)
    title: Platform
    value_options:
    - iOS
    - tvOS
  simulator_platform: iOS
- configuration: null
  opts:
    description: |-
      (Optional) The name of the Xcode Configuration to use (Debug, Release, etc.). By default your Scheme's archive action defines which Configuration should be used, but this can be overridden it with this option.

      **If the Configuration specified in this input does not exist in your project, the Step will silently ignore the value, and fall back to using the Configuration specified in the Scheme.**
    summary: The name of the Xcode Configuration to use when building
    title: Configuration name
- disable_index_while_building: "yes"
  opts:
    description: |-
      When this input is enabled, `COMPILER_INDEX_STORE_ENABLE=NO` is added to the `xcodebuild` command, which disables indexing while building. Disabling this could speed up your builds by eliminating a (normally) unnecessary step.

      Indexing is useful for certain editor features — like autocompletion, jump to definition, and code information lookup — but these features are generally not necessary in a CI environment.
    summary: This may speed up builds by skipping indexing while building.
    title: Disable indexing during the build
    value_options:
    - "yes"
    - "no"
- code_signing_allowed: "no"
  opts:
    description: |-
      When building an app for the simulator, code signing is not required and is set to "no" by default.

      On rare occasions, you may need to set the flag to "yes" — usually when working with certain test cases or third-party dependencies.
    summary: Whether or not to allow code signing for this build
    title: Code signing allowed
    value_options:
    - "yes"
    - "no"
- cache_level: swift_packages
  opts:
    description: |-
      Defines what cache content should be automatically collected.

      Available options:

      - `none`: Disable collecting cache content
      - `swift_packages`: Collect Swift PM packages added to the Xcode project
    is_required: true
    summary: Defines what cache content should be automatically collected.
    title: Enable collecting cache content
    value_options:
    - none
    - swift_packages
- opts:
    category: Debug
    description: Additional options to be added to the executed xcodebuild command.
    summary: Additional options to be added to the executed xcodebuild command.
    title: Additional options for the xcodebuild command
  xcodebuild_options: ""
- opts:
    category: Debug
    description: The working directory of the Step
    summary: The working directory of the Step
    title: Working directory
  workdir: $BITRISE_SOURCE_DIR
- opts:
    category: Debug
    description: This directory will contain the generated artifacts.
    is_required: true
    summary: This directory will contain the generated artifacts.
    title: Output directory path
  output_dir: $BITRISE_DEPLOY_DIR
- is_clean_build: "no"
  opts:
    category: Debug
    is_required: true
    summary: Whether or not to do a clean build before building
    title: Do a clean Xcode build before the build?
    value_options:
    - "yes"
    - "no"
- opts:
    category: Debug
    description: |-
      Defines how xcodebuild command's log is formatted.

      Available options:

      - `xcpretty`: The xcodebuild command's output will be prettified by xcpretty.
      - `xcodebuild`: Only the last 20 lines of raw xcodebuild output will be visible in the build log.

      The raw xcodebuild log will be exported in both cases.
    is_expand: false
    is_required: true
    summary: Defines how xcodebuild command's log is formatted.
    title: Log formatter
    value_options:
    - xcpretty
    - xcodebuild
  output_tool: xcpretty
- opts:
    category: Debug
    description: If this input is set, the Step will print additional logs for debugging.
    is_required: true
    summary: If this input is set, the Step will print additional logs for debugging.
    title: Enable verbose logging
    value_options:
    - "yes"
    - "no"
  verbose_log: "no"
outputs:
- BITRISE_APP_DIR_PATH: null
  opts:
    summary: The path to the generated (and copied) app directory
    title: Generated (and copied) app directory
- BITRISE_APP_DIR_PATH_LIST: null
  opts:
    description: |-
      This output will include the main target app's path, plus every dependent target's app path.

      The paths are separated by a `|` (pipe) character. (Example: `/deploy109787178/sample-apps-ios-workspace-swift.app|/deploy109787178/bitfall.sample-apps-ios-workspace-swift-watch.app`)
    summary: List of the generated (and copied) app paths
    title: List of the generated app paths
- BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH: null
  opts:
    description: |-
      This is the path to the raw build results log file.

      If `output_tool` is set to `xcpretty` and the build fails, this log will contain the build output.
    summary: The path to the full build output log
    title: Full raw build output filepath
