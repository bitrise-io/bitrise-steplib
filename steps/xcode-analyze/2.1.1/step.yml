title: Xcode Analyze
summary: |-
  Find flaws (potential bugs) in the source code of a project with the
  static analyzer built into Xcode.
description: |-
  Find flaws (potential bugs) in the source code of a project with the
  static analyzer built into Xcode.

  Runs Xcode's `analyze` action.
website: https://github.com/bitrise-steplib/steps-xcode-analyze
source_code_url: https://github.com/bitrise-steplib/steps-xcode-analyze
support_url: https://github.com/bitrise-steplib/steps-xcode-analyze/issues
published_at: 2019-10-15T08:57:37.265361326Z
source:
  git: https://github.com/bitrise-steplib/steps-xcode-analyze.git
  commit: 8b565bfc9d2cfc8b72151f15a3ddd1fa05ef50b9
host_os_tags:
- osx-10.10
project_type_tags:
- ios
- macos
- react-native
- cordova
- ionic
- flutter
type_tags:
- test
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-analyze
deps:
  brew:
  - name: go
  check_only:
  - name: xcode
is_requires_admin_user: false
is_always_run: false
is_skippable: false
inputs:
- opts:
    description: |
      Working directory of the step.
      You can leave it empty to don't change it.
    is_expand: true
    is_required: false
    summary: ""
    title: Working directory
  workdir: $BITRISE_SOURCE_DIR
- opts:
    description: |
      A `.xcodeproj` or `.xcworkspace` path, relative to
      the Workfing directory (if specified).
    is_dont_change_value: false
    is_expand: true
    is_required: true
    summary: ""
    title: Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: |
      The Scheme to use.

      **IMPORTANT**: The Scheme have to be marked as __shared__ in Xcode!
    is_dont_change_value: false
    is_expand: true
    is_required: true
    summary: ""
    title: Scheme name
  scheme: $BITRISE_SCHEME
- is_clean_build: "no"
  opts:
    is_dont_change_value: false
    is_expand: true
    is_required: true
    title: Do a clean Xcode build before testing?
    value_options:
    - "yes"
    - "no"
- force_code_sign_identity: null
  opts:
    description: |-
      Force xcodebuild to use specified Code Sign Identity.

      Specify code sign identity as full ID (e.g. `iPhone Developer: Bitrise Bot (VV2J4SV8V4)`)
      or specify code sign group ( `iPhone Developer` or `iPhone Distribution` ).
    title: Force code signing with Identity
- force_provisioning_profile: null
  opts:
    description: |-
      Force xcodebuild to use specified Provisioning Profile.

      Use Provisioning Profile's UUID, profile's name is not acceptable by xcodebuild.

      How to get your UUID:

      - In xcode select your project -> Build Settings -> Code Signing
      - Select the desired Provisioning Profile, then scroll down in profile list and click on Other...
      - The popup will show your profile's UUID.

      Format example:

      - c5be4123-1234-4f9d-9843-0d9be985a068
    title: Force code signing with Provisioning Profile
- disable_codesign: "yes"
  opts:
    description: In order to skip the code signing set this option to `yes`.
    title: Disable Code Signing
    value_options:
    - "yes"
    - "no"
- disable_index_while_building: "yes"
  opts:
    description: |-
      Could make the build faster by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command which will disable the indexing during the build.

      Indexing is needed for

      * Autocomplete
      * Ability to quickly jump to definition
      * Get class and method help by alt clicking.

      Which are not needed in CI environment.

      **Note:** In Xcode you can turn off the `Index-WhileBuilding` feature  by disabling the `Enable Index-WhileBuilding Functionality` in the `Build Settings`.<br/>
      In CI environment you can disable it by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command.
    summary: Could make the build faster by disabling the indexing during the build
      run.
    title: Disable indexing during the build
    value_options:
    - "yes"
    - "no"
- opts:
    category: Debug
    description: |-
      If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
      If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
    is_dont_change_value: false
    is_expand: false
    is_required: true
    title: Output tool
    value_options:
    - xcpretty
    - xcodebuild
  output_tool: xcpretty
- opts:
    category: Debug
    description: This directory will contain the generated raw-xcodebuild-output.log.
    is_required: true
    summary: Output directory path
    title: Output directory path
  output_dir: $BITRISE_DEPLOY_DIR
- opts:
    category: Debug
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "yes"
