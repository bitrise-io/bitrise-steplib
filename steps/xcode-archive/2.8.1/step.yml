title: Xcode Archive & Export for iOS
summary: Run the Xcode archive command and then export an .ipa from the archive.
description: "\nThe Step archives your Xcode project by running the `xcodebuild archive`
  command and then exports the archive into an .ipa file with the `xcodebuild -exportArchive`
  command. This .ipa file can be shared, installed on test devices, or uploaded to
  the App Store Connect.\n\n### Configuring the Step\n\nBefore you can use the Step,
  you need code signing files. Certificates must be uploaded to Bitrise while provisioning
  profiles should be either uploaded or, if using the iOS Auto Provisioning Step,
  downloaded from the Apple Developer Portal or generated automatically.\n\nTo configure
  the Step:\n\n1. Make sure the **Project (or Workspace) path** input points to the
  correct location.\n\n   By default, you do not have to change this.\n1. Set the
  correct value to the **Select method for export** input. If you use the **iOS Auto
  Provision** Step, the value of this input should be the same as the **Distribution
  type** input of that Step.\n1. Make sure the target scheme is a valid, existing
  Xcode scheme.\n1. Optionally, you can define a configuration type to be used (such
  as Debug or Release) in the **Configuration name** input.\n\n   By default, the
  selected Xcode scheme determines which configuration will be used. This option overwrites
  the configuration set in the scheme.\n1. If you wish to use a different Developer
  portal team than the one set in your Xcode project, enter the ID in the **he Developer
  Portal team to use for this export** input.\n\n### Troubleshooting\n\nIf the Step
  fails, check your code signing files first. Make sure they are the right type for
  your export method. For example, an `app-store` export method requires an App Store
  type provisioning profile and a Distribution certificate.\n\nCheck **Debug** for
  additional options to run the Step. The **Additional options for xcodebuild call**
  input allows you add any flags that the `xcodebuild` command supports.  \n\nMake
  sure the **Scheme name** and **Configuration name** inputs contain values that actually
  exist in your Xcode project.\n\n### Useful links\n\n- https://devcenter.bitrise.io/code-signing/ios-code-signing/create-signed-ipa-for-xcode/\n-
  https://devcenter.bitrise.io/code-signing/ios-code-signing/resigning-an-ipa/\n-
  https://devcenter.bitrise.io/deploy/ios-deploy/ios-deploy-index/\n\n### Related
  Steps\n\n- [Certificate and profile installer](https://www.bitrise.io/integrations/steps/certificate-and-profile-installer)\n-
  [iOS Auto Provision](https://www.bitrise.io/integrations/steps/ios-auto-provision)\n-
  [Deploy to iTunesConnect](https://www.bitrise.io/integrations/steps/deploy-to-itunesconnect-deliver)"
website: https://github.com/bitrise-steplib/steps-xcode-archive
source_code_url: https://github.com/bitrise-steplib/steps-xcode-archive
support_url: https://github.com/bitrise-steplib/steps-xcode-archive/issues
published_at: 2020-05-12T12:01:35.762315487Z
source:
  git: https://github.com/bitrise-steplib/steps-xcode-archive.git
  commit: 76ab8e77ab00525ea143720ea5c9ade7c0601d56
project_type_tags:
- ios
- react-native
- flutter
type_tags:
- build
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-archive
deps:
  check_only:
  - name: xcode
is_requires_admin_user: false
is_always_run: false
is_skippable: false
inputs:
- opts:
    description: A `.xcodeproj` or `.xcworkspace` path.
    is_required: true
    summary: ""
    title: Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: The Scheme to use.
    is_required: true
    summary: ""
    title: Scheme name
  scheme: $BITRISE_SCHEME
- configuration: null
  opts:
    description: |-
      (optional) The configuration to use. By default, your Scheme
      defines which configuration (Debug, Release, ...) should be used,
      but you can overwrite it with this option.

      **Make sure that the Configuration you specify actually exists
      in your Xcode Project**. If it does not (for example, if you have a typo
      in the value of this input), Xcode will simply use the Configuration
      specified by the Scheme and will silently ignore this parameter!
    summary: ""
    title: Configuration name
- export_method: auto-detect
  opts:
    description: |-
      `auto-detect` option is **DEPRECATED** - use direct export methods!

      Describes how Xcode should export the archive.

      If you select `auto-detect`, the step will figure out proper export method
      based on the provisioning profile embedded into the generated xcodearchive.
    is_required: true
    summary: ""
    title: Select method for export
    value_options:
    - auto-detect
    - app-store
    - ad-hoc
    - enterprise
    - development
- opts:
    description: |-
      The Developer Portal team to use for this export.

      Optional, only required if you want to use a different team for
      distribution, not the one you have set in your Xcode project.

      Format example:

      - `1MZX23ABCD4`
    summary: ""
    title: The Developer Portal team to use for this export
  team_id: null
- compile_bitcode: "yes"
  opts:
    description: |
      For __non-App Store__ exports, should Xcode re-compile the app from bitcode?
    is_required: true
    summary: ""
    title: Rebuild from bitcode
    value_options:
    - "yes"
    - "no"
- opts:
    description: For __App Store__ exports, should the package include bitcode?
    is_required: true
    summary: ""
    title: Include bitcode
    value_options:
    - "yes"
    - "no"
  upload_bitcode: "yes"
- icloud_container_environment: null
  opts:
    description: "If the app is using CloudKit, this configures the \"com.apple.developer.icloud-container-environment\"
      entitlement.  \nAvailable options vary depending on the type of provisioning
      profile used, but may include: Development and Production."
    summary: ""
    title: iCloud container environment
- disable_index_while_building: "yes"
  opts:
    description: |-
      Could make the build faster by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command which will disable the indexing during the build.

      Indexing is needed for

      * Autocomplete
      * Ability to quickly jump to definition
      * Get class and method help by alt clicking.

      Which are not needed in CI environment.

      **Note:** In Xcode you can turn off the `Index-WhileBuilding` feature  by disabling the `Enable Index-WhileBuilding Functionality` in the `Build Settings`.<br/>
      In CI environment you can disable it by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command.
    is_required: true
    summary: Could make the build faster by disabling the indexing during the build
      run.
    title: Disable indexing during the build
    value_options:
    - "yes"
    - "no"
- cache_level: swift_packages
  opts:
    description: |-
      Available options:
      - `none` : Disable caching
      - `swift_packages` : Cache Swift PM packages added to the Xcode project
    is_required: true
    title: Enable caching of Swift Package Manager packages
    value_options:
    - none
    - swift_packages
- force_team_id: null
  opts:
    category: Force Build Settings
    description: |-
      Used for Xcode version 8 and above.

      Force xcodebuild to use the specified Development Team (DEVELOPMENT_TEAM).

      Format example:

      - `1MZX23ABCD4`
    title: Force code signing with Development Team
- force_code_sign_identity: null
  opts:
    category: Force Build Settings
    description: |-
      Force xcodebuild to use specified Code Signing Identity (CODE_SIGN_IDENTITY).

      Specify Code Signing Identity as full ID (e.g. `iPhone Developer: Bitrise Bot (VV2J4SV8V4)`)
      or specify code signing group ( `iPhone Developer` or `iPhone Distribution` ).

      You also have to **specify the Identity in the format it's stored in Xcode project settings**,
      and **not how it's presented in the Xcode.app GUI**!
      This means that instead of `iOS` (`iOS Distribution/Development`) you have to use
      `iPhone` (`iPhone Distribution` or `iPhone Development`).
      **The input is case sensitive**: `iPhone Distribution` works but `iphone distribution` does not!
    title: Force code signing with Code Signing Identity
- force_provisioning_profile_specifier: null
  opts:
    category: Force Build Settings
    description: |-
      Used for Xcode version 8 and above.

      Force xcodebuild to use specified Provisioning Profile (PROVISIONING_PROFILE_SPECIFIER).

      How to get your Provisioning Profile Specifier:

      - In Xcode make sure you disabled `Automatically manage signing` on your project's `General` tab
      - Now you can select your Provisioning Profile Specifier's name as `Provisioning Profile` input value on your project's `General` tab
      - `force_provisioning_profile_specifier` input value build up by the Team ID and the Provisioning Profile Specifier name, separated with slash character ('/'): `TEAM_ID/PROFILE_SPECIFIER_NAME`

      Format example:

      - `1MZX23ABCD4/My Provisioning Profile`
    title: Force code signing with Provisioning Profile Specifier
- force_provisioning_profile: null
  opts:
    category: Force Build Settings
    description: |-
      Force xcodebuild to use specified Provisioning Profile (PROVISIONING_PROFILE).

      Use Provisioning Profile's UUID. The profile's name is not accepted by xcodebuild.

      How to get your UUID:

      - In xcode select your project -> Build Settings -> Code Signing
      - Select the desired Provisioning Profile, then scroll down in profile list and click on Other...
      - The popup will show your profile's UUID.

      Format example:

      - `c5be4123-1234-4f9d-9843-0d9be985a068`
    title: Force code signing with Provisioning Profile
- custom_export_options_plist_content: null
  opts:
    category: Debug
    description: |-
      Used for Xcode version 7 and above.

      Specifies a custom export options plist content that configures archive exporting.
      If empty, the step generates these options based on provisioning profile,
      with default values.

      Auto generated export options available for export methods:

      - app-store
      - ad-hoc
      - enterprise
      - development

      If the step doesn't find an export method based on the provisioning profile, the development method will be used.

      Call `xcodebuild -help` for available export options.
    title: Custom export options plist content
- artifact_name: ${scheme}
  opts:
    category: Debug
    description: This name will be used as basename for the generated .xcarchive,
      .ipa and .dSYM.zip files.
    title: Generated Artifact Name
- opts:
    category: Debug
    description: |-
      Options added to the end of the xcodebuild call.

      You can use multiple options, separated by a space
      character. Example: `-xcconfig PATH -verbose`
    title: Additional options for xcodebuild call
  xcodebuild_options: null
- opts:
    category: Debug
    description: |-
      Working directory of the step.
      You can leave it empty to leave the working directory unchanged.
    summary: ""
    title: Working directory
  workdir: $BITRISE_SOURCE_DIR
- opts:
    category: Debug
    description: This directory will contain the generated .ipa and .dSYM.zip files.
    is_required: true
    summary: ""
    title: Output directory path
  output_dir: $BITRISE_DEPLOY_DIR
- is_clean_build: "no"
  opts:
    category: Debug
    is_required: true
    title: Do a clean Xcode build before the archive?
    value_options:
    - "yes"
    - "no"
- opts:
    category: Debug
    description: |-
      If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
      If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
    is_required: true
    title: Output tool
    value_options:
    - xcpretty
    - xcodebuild
  output_tool: xcpretty
- export_all_dsyms: "yes"
  opts:
    category: Debug
    description: |-
      If this input is set to `yes` step will collect every dsym (.app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
      Otherwise only .app dsym will be zipped and the zip path exported.
    is_required: true
    title: Export all dsyms
    value_options:
    - "yes"
    - "no"
- opts:
    category: Debug
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "yes"
- opts:
    category: Debug
    description: If this input is set to `yes`, step will use deprecated ipa export
      method.
    is_required: true
    title: Use deprecated ipa export method?
    value_options:
    - "yes"
    - "no"
  use_deprecated_export: "no"
outputs:
- BITRISE_IPA_PATH: null
  opts:
    title: The created .ipa file's path
- BITRISE_APP_DIR_PATH: null
  opts:
    title: The generated .app directory
- BITRISE_DSYM_DIR_PATH: null
  opts:
    description: |-
      If `export_all_dsyms` is set to `"yes"`, step will collect every dsym (.app dsym and framwork dsyms) in a directory and export the directory path.
      Otherwise this environment points to the .app.DSYM directory path.
    title: The created .dSYM dir's path
- BITRISE_DSYM_PATH: null
  opts:
    description: |-
      If `export_all_dsyms` is set to `"yes"`, step will collect every dsym (.app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
      Otherwise this environment points to the zipped .app.DSYM directory path.
    title: The created .dSYM.zip file's path
- BITRISE_XCARCHIVE_PATH: null
  opts:
    title: The created .xcarchive file's path
- BITRISE_XCARCHIVE_ZIP_PATH: null
  opts:
    description: The created .xcarchive.zip file's path.
    title: The created .xcarchive.zip file's path
- BITRISE_XCODE_ARCHIVE_RAW_RESULT_TEXT_PATH: null
  opts:
    description: |-
      This is the path of the raw archive results log file.

      If `output_tool=xcpretty` and the archive fails this log will contain the archive output.
    title: The full, raw archive output file path
- BITRISE_IDEDISTRIBUTION_LOGS_PATH: null
  opts:
    title: Path to the xcdistributionlogs
