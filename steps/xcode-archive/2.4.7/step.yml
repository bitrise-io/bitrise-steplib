title: Xcode Archive & Export for iOS
summary: Run Xcode Archive command and then Export an IPA from the archive.
description: |-
  Run Xcode Archive command and then Export an IPA from the archive
  for iOS, tvOS or watchOS.

  You can share it, upload it, deploy it and catch them
  all! Well, maybe not the last one.
website: https://github.com/bitrise-io/steps-xcode-archive
source_code_url: https://github.com/bitrise-io/steps-xcode-archive
support_url: https://github.com/bitrise-io/steps-xcode-archive/issues
published_at: !!timestamp 2018-05-07T15:31:18.606155338+02:00
source:
  git: https://github.com/bitrise-io/steps-xcode-archive.git
  commit: 84c46465fc2926a0338c33007dca8e948dfe35de
host_os_tags:
- osx-10.10
project_type_tags:
- ios
- react-native
type_tags:
- build
toolkit:
  go:
    package_name: github.com/bitrise-io/steps-xcode-archive
deps:
  brew:
  - name: go
  check_only:
  - name: xcode
is_requires_admin_user: false
is_always_run: false
is_skippable: false
inputs:
- opts:
    description: A `.xcodeproj` or `.xcworkspace` path.
    is_required: true
    summary: ""
    title: Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: The Scheme to use.
    is_required: true
    summary: ""
    title: Scheme name
  scheme: $BITRISE_SCHEME
- configuration: null
  opts:
    description: |-
      (optional) The configuration to use. By default your Scheme
      defines which configuration (Debug, Release, ...) should be used,
      but you can overwrite it with this option.

      **Make sure that the Configuration you specify actually exists
      in your Xcode Project**. If it does not, if you have a typo
      in the value of this input Xcode will simply use the Configuration
      specified by the Scheme and will silently ignore this parameter!
    summary: ""
    title: Configuration name
- export_method: auto-detect
  opts:
    description: |-
      `auto-detect` option is **DEPRECATED** - use direct export methods!

      Describes how Xcode should export the archive.

      If you select `auto-detect` step will figure out proper export method
      based on provisioning profile embedded into generated xcodearchive.
    summary: ""
    title: Select method for export
    value_options:
    - auto-detect
    - app-store
    - ad-hoc
    - enterprise
    - development
- opts:
    description: |-
      The Developer Portal team to use for this export.

      Optional, only required if you want to use a different team for
      distribution, not the one you have set in your Xcode project.

      Format example:

      - `1MZX23ABCD4`
    summary: ""
    title: The Developer Portal team to use for this export
  team_id: null
- compile_bitcode: "yes"
  opts:
    description: |
      For __non-App Store__ exports, should Xcode re-compile the app from bitcode?
    summary: ""
    title: Rebuild from bitcode
    value_options:
    - "yes"
    - "no"
- opts:
    category: Force Build Settings
    description: |-
      Used for Xcode version 8 and above.

      Force xcodebuild to use specified Development Team (DEVELOPMENT_TEAM).

      Format example:

      - `1MZX23ABCD4`
    title: Force code signing with Development Team
  upload_bitcode: "yes"
- force_code_sign_identity: null
  opts:
    category: Force Build Settings
    description: |-
      Force xcodebuild to use specified Code Signing Identity (CODE_SIGN_IDENTITY).

      Specify Code Signing Identity as full ID (e.g. `iPhone Developer: Bitrise Bot (VV2J4SV8V4)`)
      or specify code sign group ( `iPhone Developer` or `iPhone Distribution` ).

      You also have to **specify the Identity in the format it's stored in Xcode project settings**,
      and **not how it's presented in the Xcode.app GUI**!
      This means that instead of `iOS` (`iOS Distribution/Development`) you have to use
      `iPhone` (`iPhone Distribution` or `iPhone Development`).
      **Capitalization also matters**, `iPhone Distribution` works but `iphone distribution` does not!
    title: Force code signing with Code Signing Identity
- force_provisioning_profile_specifier: null
  opts:
    category: Force Build Settings
    description: |-
      Used for Xcode version 8 and above.

      Force xcodebuild to use specified Provisioning Profile (PROVISIONING_PROFILE_SPECIFIER).

      How to get your Provisioning Profile Specifier:

      - In Xcode make sure you disabled `Automatically manage signing` on your project's `General` tab
      - Now you can select your Provisioning Profile Specifier's name as `Provisioning Profile` input value on your project's `General` tab
      - `force_provisioning_profile_specifier` input value build up by the Team ID and the Provisioning Profile Specifier name, separated with slash character ('/'): `TEAM_ID/PROFILE_SPECIFIER_NAME`

      Format example:

      - `1MZX23ABCD4/My Provisioning Profile`
    title: Force code signing with Provisioning Profile Specifier
- force_provisioning_profile: null
  opts:
    category: Force Build Settings
    description: |-
      Force xcodebuild to use specified Provisioning Profile (PROVISIONING_PROFILE).

      Use Provisioning Profile's UUID, profile's name is not acceptable by xcodebuild.

      How to get your UUID:

      - In xcode select your project -> Build Settings -> Code Signing
      - Select the desired Provisioning Profile, then scroll down in profile list and click on Other...
      - The popup will show your profile's UUID.

      Format example:

      - `c5be4123-1234-4f9d-9843-0d9be985a068`
    title: Force code signing with Provisioning Profile
- custom_export_options_plist_content: null
  opts:
    category: Debug
    description: |-
      Used for Xcode version 7 and above.

      Specifies a custom export options plist content that configures archive exporting.
      If empty, step generates these options based on provisioning profile,
      with default values.

      Auto generated export options available for export methods:

      - app-store
      - ad-hoc
      - enterprise
      - development

      If step doesn't find export method based on provisioning profile, development will be use.

      Call `xcodebuild -help` for available export options.
    title: Custom export options plist content
- artifact_name: ${scheme}
  opts:
    category: Debug
    description: This name will be used as basename for the generated .xcarchive,
      .ipa and .dSYM.zip files.
    title: Generated Artifact Name
- opts:
    category: Debug
    description: |-
      Options added to the end of the xcodebuild call.

      You can use multiple options, separated by a space
      character. Example: `-xcconfig PATH -verbose`
    title: Additional options for xcodebuild call
  xcodebuild_options: ""
- opts:
    category: Debug
    description: |-
      Working directory of the step.
      You can leave it empty to don't change it.
    summary: ""
    title: Working directory
  workdir: $BITRISE_SOURCE_DIR
- opts:
    category: Debug
    description: This directory will contain the generated .ipa and .dSYM.zip files.
    is_required: true
    summary: ""
    title: Output directory path
  output_dir: $BITRISE_DEPLOY_DIR
- is_clean_build: "no"
  opts:
    category: Debug
    is_required: true
    title: Do a clean Xcode build before the archive?
    value_options:
    - "yes"
    - "no"
- opts:
    category: Debug
    description: |-
      If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
      If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
    is_expand: false
    is_required: true
    title: Output tool
    value_options:
    - xcpretty
    - xcodebuild
  output_tool: xcpretty
- is_export_xcarchive_zip: "no"
  opts:
    category: Debug
    description: If this input is set to `yes`, the generated .xcarchive will be zipped
      and moved to `output_dir`.
    is_required: true
    title: Export the generated archive?
    value_options:
    - "yes"
    - "no"
- export_all_dsyms: "yes"
  opts:
    category: Debug
    description: |-
      If this input is set to `yes` step will collect every dsym (.app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
      Otherwise only .app dsym will be zipped and the zip path exported.
    is_required: true
    title: Export all dsyms
    value_options:
    - "yes"
    - "no"
- opts:
    category: Debug
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "yes"
- opts:
    category: Debug
    description: If this input is set to `yes`, step will use deprecated ipa export
      method.
    is_required: true
    title: Use deprecated ipa export method?
    value_options:
    - "yes"
    - "no"
  use_deprecated_export: "no"
outputs:
- BITRISE_IPA_PATH: null
  opts:
    title: The created .ipa file's path
- BITRISE_APP_DIR_PATH: null
  opts:
    title: The generated .app directory
- BITRISE_DSYM_DIR_PATH: null
  opts:
    description: |-
      If `export_all_dsyms` is set to `"yes"`, step will collect every dsym (.app dsym and framwork dsyms) in a directory and export the directory path.
      Otherwise this environment points to the .app.DSYM directory path.
    title: The created .dSYM dir's path
- BITRISE_DSYM_PATH: null
  opts:
    description: |-
      If `export_all_dsyms` is set to `"yes"`, step will collect every dsym (.app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
      Otherwise this environment points to the zipped .app.DSYM directory path.
    title: The created .dSYM.zip file's path
- BITRISE_XCARCHIVE_PATH: null
  opts:
    title: The created .xcarchive file's path
- BITRISE_XCARCHIVE_ZIP_PATH: null
  opts:
    description: |-
      The created .xcarchive.zip file's path.

      This environment will be exported only if, is_export_xcarchive_zip="yes"
    title: The created .xcarchive.zip file's path
- BITRISE_XCODE_ARCHIVE_RAW_RESULT_TEXT_PATH: null
  opts:
    description: |-
      This is the path of the raw archive results log file.

      If `output_tool=xcpretty` and the archive fails this log will contain the archive output.
    title: The full, raw archive output file path
- BITRISE_IDEDISTRIBUTION_LOGS_PATH: null
  opts:
    title: Path to the xcdistributionlogs
