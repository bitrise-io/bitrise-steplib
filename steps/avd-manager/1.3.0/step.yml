title: AVD Manager
summary: Create and boot an Android emulator used for device testing
description: |-
  Run instrumented and UI tests on a virtual Android device. Once some basic inputs are set, the Step checks the requirements, downloads the selected system image before creating and starting the emulator.

  **Warning:** Android emulators can't run on Apple Silicon build machines. Until nested virtualization becomes supported, you should run emulator tests on Linux machines.

  ### Configuring the Step
  1. Add the **AVD Manager** Step to your Workflow as one of the first Steps in your Workflow.
  2. Set the **Device Profile** to create a new Android virtual device. To see the complete list of available profiles, use the `avdmanager list device` command and use the `id` value for this input.
  3. Set the **Android API Level**. The new virtual device will run with the specified Android version.
  4. Select an **OS Tag** to have the required toolset on the new virtual device.

  Some system images are pre-installed on the virtual machines. In this case the step won't have to spend time downloading the requested image. To check the list of pre-installed images for each stack, visit the [system reports](https://stacks.bitrise.io).

  ### Troubleshooting
  The emulator needs some time to boot up. The earlier you place the Step in your Workflow, the more tasks, such as cloning or caching, you can complete in your Workflow before the emulator starts working.
  We recommend that you also add **Wait for Android emulator** Step to your Workflow as it acts as a shield preventing the AVD Manager to kick in too early. Make sure you add the **Wait for Android emulator** Step BEFORE the Step with which you want to use the **AVD Manager**.

  ### Useful links
  - [Getting started with Android apps](https://devcenter.bitrise.io/getting-started/getting-started-with-android-apps/)
  - [Device testing for Android](https://devcenter.bitrise.io/testing/device-testing-for-android/)
  - [About Test Reports](https://devcenter.bitrise.io/testing/test-reports/)

  ### Related Steps
  - [Wait for Android emulator](https://www.bitrise.io/integrations/steps/wait-for-android-emulator)
  - [Android Build for UI testing](https://www.bitrise.io/integrations/steps/android-build-for-ui-testing)
website: https://github.com/bitrise-steplib/steps-avd-manager
source_code_url: https://github.com/bitrise-steplib/steps-avd-manager
support_url: https://github.com/bitrise-steplib/steps-avd-manager/issues
published_at: 2024-11-22T14:15:05.30224367Z
source:
  git: https://github.com/bitrise-steplib/steps-avd-manager.git
  commit: 70b5f4f35674c8634a14c1f23fca0521ae4be124
type_tags:
- test
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-avd-manager
is_always_run: false
is_skippable: false
inputs:
- opts:
    description: |
      The profile contains parameters of the device, such as screen size and resolution.

      To see the complete list of available profiles use the `avdmanager list device` command locally and use the `id` value for this input.
    is_required: true
    summary: Device profile to use when creating the virtual device.
    title: Device Profile ID
  profile: pixel
- api_level: 26
  opts:
    description: The device will run with the specified system image version.
    is_required: true
    summary: The device will run with the specified system image version.
    title: Android API Level
- opts:
    description: Select OS tag to have the required toolset on the device.
    is_expand: true
    is_required: true
    summary: Select OS tag to have the required toolset on the device.
    title: OS Tag
    value_options:
    - google_apis
    - google_apis_playstore
    - google_atd
    - aosp_atd
    - android-wear
    - android-tv
    - default
  tag: google_apis
- abi: x86
  opts:
    category: Advanced
    description: Select which ABI to use running the emulator. Availability depends
      on API level. Please use `sdkmanager --list` command to see the available ABIs.
    is_expand: true
    is_required: true
    summary: Select which ABI to use running the emulator. Availability depends on
      API level. Please use `sdkmanager --list` command to see the available ABIs.
    title: ABI
    value_options:
    - x86
    - x86_64
    - armeabi-v7a
    - arm64-v8a
    - mips
- emulator_id: emulator
  opts:
    category: Advanced
    description: Set the device's ID. (This will be the name under $HOME/.android/avd/)
    is_required: true
    summary: Set the device's ID. (This will be the name under $HOME/.android/avd/)
    title: ID
- create_command_flags: --sdcard 2048M
  opts:
    category: Advanced
    description: Flags used when running the command to create the emulator.
    is_required: false
    summary: Flags used when running the command to create the emulator.
    title: Create AVD command flags
- opts:
    category: Advanced
    description: Flags used when running the command to start the emulator.
    is_required: false
    summary: Flags used when running the command to start the emulator.
    title: Start AVD command flags
  start_command_flags: -camera-back none -camera-front none
- emulator_build_number: preinstalled
  opts:
    category: Emulator
    description: |-
      Allows installing a specific emulator version at runtime. The default value (`preinstalled`) will use the emulator version preinstalled on the Stack, which is updated regularly to the latest stable version.

      See available build numbers [here](https://developer.android.com/studio/emulator_archive) (you need the last segment of the download URL). Note: this input expects the **build number**, not the **version number**.

      When this input set to a specific build number, the `emulator_channel` input should be set to `no update`.
    title: Emulator build number
- emulator_channel: no update
  opts:
    category: Emulator
    description: |-
      Select which channel to use with `sdkmanager` to fetch *emulator* package. Available options are no update, or channels 0 (Stable), 1 (Beta), 2 (Dev), and 3 (Canary).

      - `no update`: The *emulator* preinstalled on the Stack will be used. *system-image* will be updated to the latest Stable version.

      To update *emulator* and *system image* to the latest available in a given channel:
      - `0`: Stable channel
      - `1`: Beta channel
      - `2`: Dev channel
      - `3`: Canary channel

      When this input set to a specific channel, the `emulator_build_number` input should be set to `preinstalled`.
    is_expand: true
    is_required: true
    summary: Select which channel to use with `sdkmanager` to fetch *emulator* package.
      Available options are no update, or channels 0 (Stable), 1 (Beta), 2 (Dev),
      and 3 (Canary).
    title: Emulator channel
    value_options:
    - no update
    - "0"
    - "1"
    - "2"
    - "3"
- headless_mode: "yes"
  opts:
    category: Emulator
    description: |-
      In headless mode the emulator is not launched in the foreground.

      If this input is set, the emulator will not be visible but tests (even the screenshots) will run just like if the emulator ran in the foreground.
    is_required: true
    summary: In headless mode the emulator is not launched in the foreground.
    title: Run the emulator in headless mode
    value_options:
    - "yes"
    - "no"
outputs:
- BITRISE_EMULATOR_SERIAL: null
  opts:
    description: Booted emulator serial
    title: Emulator serial
