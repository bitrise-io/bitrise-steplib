title: iOS Auto Provision with App Store Connect API
summary: Automatically manages your iOS Provisioning Profiles for your Xcode project.
description: "The Step uses the official [App Store Connect API](https://developer.apple.com/documentation/appstoreconnectapi/generating_tokens_for_api_requests).
  \nThe Steps performs the following:\n- It generates, updates and downloads the provisioning
  profiles needed for your iOS project.\n- It verifies if your project is registered
  with the App Store Connect. If it was not, the Step registers your project.\n- It
  registers the iOS devices connected to your Bitrise account with the App Store Connect.\n-
  It modifies the iOS project to use manual code signing if the project uses automatically
  managed signing.\n\n### Configuring the Step\n\nBefore you start configuring the
  Step, make sure you've completed the following requirements:\n1. You've generated
  an [API key](https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api)
  and obtained an **Issuer ID**, **Key ID** and a **Private Key**.\n2. You've [defined
  your Apple Developer Account to Bitrise](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#defining-your-apple-developer-account-to-bitrise).\n3.
  You've [assigned an Apple Developer Account to your app](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#assigning-an-apple-developer-account-for-your-app).\n\nOnce
  these are done, most of the required Step input fields are already populated for
  you.\n\nTo configure the Step:\n\n1. Add the **iOS Auto Provision with App Store
  Connect API** after any dependency installer Step in your Workflow, such as **Run
  CocoaPods install** or **Carthage**.\n\n2. Click the Step to edit its input fields.
  You can see that the **Build API token**, **Build URL**, and the **Xcode Project
  (or Workspace) path** inputs are automatically filled out for you.\n\n- **Build
  API token**: Every running build has a temporary API token on a Bitrise virtual
  machine. This token is only available while the build is running. The Step downloads
  the connected API key with the help of this API token and Bitrise saves it in a
  JSON file.\n\n- **Build URL**: URL of the current build or local path URL to your
  `apple_developer_portal_data.json`.\n\n- **Xcode Project path**: The path where
  the `.xcodeproj` / `.xcworkspace` is located.\n\n3. **Distribution type** input's
  value has to match with the value of the **Select method for export** input in the
  **Xcode Archive & Export for iOS** Step.\n\n4. With the **Scheme name** input you
  can restrict which targets to process.\n\n### Troubleshooting\nMake sure you do
  not have the **Certificate and Profile Installer** Step in your Workflow.\nMake
  sure that you do NOT modify your Xcode project between the **iOS Auto Provision
  with App Store Connect API** and the **Xcode Archive & Export for iOS** Steps. For
  example, do not change the **bundle ID** after the **iOS Auto Provision with App
  Store Connect API** Step.\n\n### Useful links\n- [Managing iOS code signing files
  - automatic provisioning](https://devcenter.bitrise.io/code-signing/ios-code-signing/ios-auto-provisioning/)\n-
  [About iOS Auto Provision with Apple ID](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#assigning-an-apple-developer-account-for-your-appv)\n\n###
  Related Steps\n- [iOS Auto Provision with Apple ID](https://www.bitrise.io/integrations/steps/ios-auto-provision)\n-
  [Xcode Archive & Export](https://www.bitrise.io/integrations/steps/xcode-archive)"
website: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
source_code_url: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
support_url: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect/issues
published_at: 2021-01-13T12:10:15.080428478Z
source:
  git: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect.git
  commit: e175864cd4d36ed49383aa05ffffe5ea7f8b587c
project_type_tags:
- ios
type_tags:
- code-sign
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: .IsCI
inputs:
- build_api_token: $BITRISE_BUILD_API_TOKEN
  opts:
    description: Every build gets a temporary Bitrise API token to download the connected
      API key in a JSON file.
    is_required: true
    title: Build API token
- build_url: $BITRISE_BUILD_URL
  opts:
    description: URL of the current build or local path URL to your apple_developer_portal_data.json.
    is_required: true
    title: Build URL
- distribution_type: development
  opts:
    description: Describes how Xcode should sign your project.
    is_required: true
    title: Distribution type
    value_options:
    - development
    - app-store
    - ad-hoc
    - enterprise
- opts:
    description: The path where the `.xcodeproj` / `.xcworkspace` is located.
    is_required: true
    title: Xcode Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: The Xcode Scheme to use.
    is_required: true
    title: Scheme name
  scheme: $BITRISE_SCHEME
- configuration: null
  opts:
    description: |-
      The Xcode Configuration to use.
      By default your Scheme defines which Configuration (for example, Debug, Release) should be used,
      but you can overwrite it with this option.
    title: Configuration name
- min_profile_days_valid: 0
  opts:
    description: |-
      Sometimes you want to sign an app with a Provisioning Profile that is valid for at least 'x' days.
      For example, an enterprise app won't open if your Provisioning Profile is expired. With this parameter, you can have a Provisioning Profile that's at least valid for 'x' days.
      By default it is set to `0` and renews the Provisioning Profile when expired.
    is_required: false
    title: The minimum days the Provisioning Profile should be valid
- opts:
    category: Debug
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "no"
- certificate_urls: $BITRISE_CERTIFICATE_URL
  opts:
    category: Debug
    description: |
      URLs of the certificates to download.
      Multiple URLs can be specified, separated by a pipe (`|`) character,
      you can specify a local path as well, using the `file://` scheme.
      __Provide a development certificate__ URL, to ensure development code signing files for the project and __also provide a distribution certificate__ URL, to ensure distribution code signing files for your project, for example, `file://./development/certificate/path|https://distribution/certificate/url`
    is_required: true
    is_sensitive: true
    title: Certificate URL
- opts:
    category: Debug
    description: |
      Certificate passphrases.
      Multiple passphrases can be specified, separated by a pipe (`|`) character.
      __Specified certificate passphrase count should match the count of the certificate urls__,for example, (1 certificate with empty passphrase, 1 certificate with non-empty passphrase): `|distribution-passphrase`
    is_required: true
    is_sensitive: true
    title: Certificate passphrase
  passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
- keychain_path: $HOME/Library/Keychains/login.keychain
  opts:
    category: Debug
    description: The Keychain path.
    is_required: true
    title: Keychain path
- keychain_password: $BITRISE_KEYCHAIN_PASSWORD
  opts:
    category: Debug
    description: The Keychain's password.
    is_required: true
    is_sensitive: true
    title: Keychain's password
outputs:
- BITRISE_EXPORT_METHOD: null
  opts:
    description: 'Distribution type can be one of the following: `development`, `app-store`,
      `ad-hoc` or `enterprise`.'
    title: The selected distribution type
- BITRISE_DEVELOPER_TEAM: null
  opts:
    description: The development team's ID, for example, `1MZX23ABCD4`.
    title: The development team's ID
- BITRISE_DEVELOPMENT_CODESIGN_IDENTITY: null
  opts:
    description: 'The development codesign identity''s name, for example, `iPhone
      Developer: Bitrise Bot (VV2J4SV8V4)`.'
    title: The development codesign identity's name
- BITRISE_PRODUCTION_CODESIGN_IDENTITY: null
  opts:
    description: 'The production codesign identity''s name, for example, `iPhone Distribution:
      Bitrise Bot (VV2J4SV8V4.'
    title: The production codesign identity's name
- BITRISE_DEVELOPMENT_PROFILE: null
  opts:
    description: The development provisioning profile's UUID which belongs to the
      main target, for example, `c5be4123-1234-4f9d-9843-0d9be985a068`.
    title: The main target's development provisioning profile UUID
- BITRISE_PRODUCTION_PROFILE: null
  opts:
    description: The production provisioning profile's UUID which belongs to the main
      target, for example, `c5be4123-1234-4f9d-9843-0d9be985a068`.
    title: The main target's production provisioning profile UUID
