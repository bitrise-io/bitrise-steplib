title: iOS Auto Provision with App Store Connect API
summary: Automatically manages your iOS Provisioning Profiles for your Xcode project
description: |-
  ### Automatically manages your iOS Provisioning Profiles for your Xcode project.

  __Setup guide__: [Managing iOS code signing files - automatic provisioning](https://devcenter.bitrise.io/code-signing/ios-code-signing/ios-auto-provisioning/)

  How does it work?

  - ensures that the __Application Identifier__ exists on the Apple Developer Portal
  - ensures that the __project's Capabilities__ are set correctly in the Application Identifier
  - ensures that the __Provisioning Profiles__ exist on the Apple Developer Portal and are installed for the build
  - ensure that all the available __Test Devices__ exist on the Apple Developer Portal and are included in the Provisioning Profiles
  - installs the provided __Codesigning Certificates__ into the Keychain
website: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
source_code_url: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
support_url: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect/issues
published_at: 2020-05-28T10:57:29.517494113Z
source:
  git: https://github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect.git
  commit: c1d53fc60d082f8e32efaa0ea43231d25c1be772
project_type_tags:
- ios
type_tags:
- code-sign
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-ios-auto-provision-appstoreconnect
is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: .IsCI
inputs:
- build_api_token: $BITRISE_BUILD_API_TOKEN
  opts:
    description: Bitrise API token
    is_required: true
    title: Build API token
- build_url: $BITRISE_BUILD_URL
  opts:
    description: URL of the current build or local path URL to your apple_developer_portal_data.json
    is_required: true
    title: Build URL
- distribution_type: development
  opts:
    description: Describes how Xcode should sign your project.
    is_required: true
    title: Distribution type
    value_options:
    - development
    - app-store
    - ad-hoc
    - enterprise
- opts:
    description: A `.xcodeproj` or `.xcworkspace` path.
    is_required: true
    title: Xcode Project (or Workspace) path
  project_path: $BITRISE_PROJECT_PATH
- opts:
    description: The Xcode Scheme to use.
    is_required: true
    title: Scheme name
  scheme: $BITRISE_SCHEME
- configuration: null
  opts:
    description: |-
      The Xcode Configuration to use.

      By default your Scheme defines which Configuration (Debug, Release, ...) should be used,
      but you can overwrite it with this option.
    title: Configuration name
- min_profile_days_valid: 0
  opts:
    description: |-
      Sometimes you want to sign an app with a Provisioning Profile that is valid for at least 'x' days.

      For example, an enterprise app won't open if your Provisioning Profile is expired. With this parameter, you can have a Provisioning Profile that's at least valid for 'x' days.

      By default (0) it just renews the Provisioning Profile when expired.
    is_required: false
    title: The minimum days the Provisioning Profile should be valid
- opts:
    category: Debug
    description: Enable verbose logging?
    is_required: true
    title: Enable verbose logging?
    value_options:
    - "yes"
    - "no"
  verbose_log: "no"
- certificate_urls: $BITRISE_CERTIFICATE_URL
  opts:
    category: Debug
    description: |
      URLs of the certificates to download.

      Multiple URLs can be specified, separated by a pipe (`|`) character,
      you can specify a local path as well, using the `file://` scheme.

      __Provide a development certificate__ url, to ensure development code signing files for the project and __also provide a distribution certificate__ url, to ensure distribution code signing files for your project.

      __Example:__ `file://./development/certificate/path|https://distribution/certificate/url`
    is_required: true
    is_sensitive: true
    title: Certificate URL
- opts:
    category: Debug
    description: |
      Certificate passphrases.

      Multiple passphrases can be specified, separated by a pipe (`|`) character.

      __Specified certificate passphrase count should match the count of the certificate urls.__

      __Example__ (1 certificate with empty passphrase, 1 certificate with non-empty passphrase): `|distribution-passphrase`
    is_required: true
    is_sensitive: true
    title: Certificate passphrase
  passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
- keychain_path: $HOME/Library/Keychains/login.keychain
  opts:
    category: Debug
    description: The Keychain path.
    is_required: true
    title: Keychain path
- keychain_password: $BITRISE_KEYCHAIN_PASSWORD
  opts:
    category: Debug
    description: The Keychain's password.
    is_required: true
    is_sensitive: true
    title: Keychain's password
outputs:
- BITRISE_EXPORT_METHOD: null
  opts:
    description: |-
      The selected distribution type.

      One of: `development`, `app-store`, `ad-hoc` or `enterprise`
    title: The selected distribution type
- BITRISE_DEVELOPER_TEAM: null
  opts:
    description: |-
      The development team's ID.

      Example: `1MZX23ABCD4`
    title: The development team's ID
- BITRISE_DEVELOPMENT_CODESIGN_IDENTITY: null
  opts:
    description: |-
      The development codesign identity's name.

      Example: `iPhone Developer: Bitrise Bot (VV2J4SV8V4)`
    title: The development codesign identity's name
- BITRISE_PRODUCTION_CODESIGN_IDENTITY: null
  opts:
    description: |-
      The production codesign identity's name.

      Example: `iPhone Distribution: Bitrise Bot (VV2J4SV8V4)`
    title: The production codesign identity's name
- BITRISE_DEVELOPMENT_PROFILE: null
  opts:
    description: |-
      The main target's development provisioning profile's UUID.

      Example: `c5be4123-1234-4f9d-9843-0d9be985a068`
    title: The main target's development provisioning profile's UUID
- BITRISE_PRODUCTION_PROFILE: null
  opts:
    description: |-
      The main target's production provisioning profile's UUID.

      Example: `c5be4123-1234-4f9d-9843-0d9be985a068`
    title: The main target's production provisioning profile's UUID
