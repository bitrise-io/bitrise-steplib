title: Deploy to App Store Connect - Application Loader (formerly iTunes Connect)
summary: Uploads binaries (.ipa / .pkg files) to [App Store Connect](https://appstoreconnect.apple.com/).
description: "Upload your binaries to [App Store Connect](https://appstoreconnect.apple.com/)
  using Apple's Application Loader. You can upload iOS, macOS, or Apple TV apps with
  the Step. The Step does not upload metadata, screenshots, nor does it submit your
  app for review. For that, use the **Deploy to App Store Connect with Deliver** Step.\n\nThis
  Step, however, does NOT build your binary: to create an IPA or PKG file, you need
  the right version of the **Xcode Archive** Step, or any other Step that is capable
  of building a binary file.  \n\n### Configuring the Step \n\nBefore you start using
  this Step, you need to do a couple of things:\n\n* Register an app on the **My Apps**
  page of App Store Connect. Click on the **plus** sign and select the **New App**
  option. This requires an **admin** account.\n* This Step requires an app signed
  with App Store Distibution provisioning profile. Make sure that you use the correct
  code signing files and the correct export method with the Step that builds your
  binary.\n* Every build that you want to push to the App Store Connect must have
  a unique build and version number pair. Increment either or both before a new deploy
  to the App Store Connect.\n\nTo deploy your app with the Step: \n1. Make sure that
  either the **IPA path** or the **PKG path** input has a valid value. The default
  value is perfect for most cases: it points to the output generated by the **Xcode
  Archive** Step.\n1. Set up your connection depending on which authentication method
  you wish to use:\n    - Use a previously configured Bitrise Apple Developer connection:
  Set the **Bitrise Apple Developer Connection** to `automatic` (this is the default
  setting), `api_key` or `apple_id`.\n    - Provide manual Step inputs: Add authentication
  data depending on which authentication method you wish to use, either Apple ID or
  API key authentication. Set the **Bitrise Apple Developer Connection** to `off`.
  Use only one of the authentication methods.\n        * For API key: Provide your
  **API Key: URL** (for example, https://URL/TO/AuthKey_something.p8 or file:///PATH/TO/AuthKey_something.p8)
  and the **API Key: Issuer ID** inputs.\n        * For Apple ID: Use the Apple Developer
  connection based on Apple ID authentication. If no app-specific password has been
  added to the used connection, the **Apple ID: App-specific password** Step input
  will be used. Other authentication-related Step inputs are ignored.\n\n### Troubleshooting\n\nUse
  only one of the authentication methods, if you add both the Apple ID and the API
  key inputs the step will fail.\n\nMake sure your Apple ID credentials are correct.
  Be aware that if you use two-factor authentication, you need to [set up](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#setting-up-connection-with-the-apple-id-and-password)
  a connection with Apple ID.\n\nAlways make sure that **Platform** input is set to
  the correct value.\n\nThe Step can also fail if the **Xcode Archive** Step - or
  any other Step that builds your binary - did not generate an IPA or PKG with a `app-store`
  export method. \n\n### Useful links \n\n- [Deploying an app to iTunesConnect](https://devcenter.bitrise.io/deploy/ios-deploy/deploying-an-ios-app-to-itunes-connect/)\n-
  [iOS deployment](https://devcenter.bitrise.io/deploy/ios-deploy/ios-deploy-index/)\n\n###
  Related Steps \n\n- [Deploy to Google Play](https://www.bitrise.io/integrations/steps/google-play-deploy)\n-
  [Xcode Archive & Export for iOS](https://www.bitrise.io/integrations/steps/xcode-archive)\n-
  [Appetize.io deploy](https://www.bitrise.io/integrations/steps/appetize-deploy)"
website: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader
source_code_url: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader
support_url: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader/issues
published_at: 2022-03-11T15:20:10.540296499Z
source:
  git: https://github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader.git
  commit: 2e859520a4966690156a3ca38ff8acb0fa82f019
project_type_tags:
- ios
- macos
- xamarin
- cordova
- ionic
- react-native
- flutter
type_tags:
- deploy
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-deploy-to-itunesconnect-application-loader
inputs:
- connection: automatic
  opts:
    description: |-
      The input determines the method used for Apple Service authentication. By default, any enabled Bitrise Apple Developer connection is used and other authentication-related Step inputs are ignored.

      There are two types of Apple Developer connection you can enable on Bitrise: one is based on an API key of the App Store Connect API, the other is the Apple ID authentication. You can choose which type of Bitrise Apple Developer connection to use or you can tell the Step to only use Step inputs for authentication:
      - `automatic`: Use any enabled Apple Developer connection, either based on Apple ID authentication or API key authentication.  Step inputs are only used as a fallback. API key authentication has priority over Apple ID authentication in both cases.
      - `api_key`: Use the Apple Developer connection based on API key authentication. Authentication-related Step inputs are ignored.
      - `apple_id`: Use the Apple Developer connection based on Apple ID authentication and the **Application-specific password** Step input. Other authentication-related Step inputs are ignored.
      - `off`: Do not use any Apple Developer Connection. Only authentication-related Step inputs are considered.
    is_required: true
    summary: The Apple Service authentication method the Step uses. By default, any
      enabled Bitrise Apple Developer connection is used and other authentication-related
      Step inputs are ignored.
    title: Bitrise Apple Developer Connection
    value_options:
    - automatic
    - api_key
    - apple_id
    - "off"
- api_key_path: ""
  opts:
    description: |-
      Specify the path in an URL format where your API key is stored.
      For example: `https://URL/TO/AuthKey_[KEY_ID].p8` or `file:///PATH/TO/AuthKey_[KEY_ID].p8`.
      **NOTE:** The Step will only recognize the API key if the filename includes the  `KEY_ID` value as shown on the examples above.


      You can upload your key on the **Generic File Storage** tab in the Workflow Editor and set the Environment Variable for the file here.


      For example: `$BITRISEIO_MYKEY_URL`
    summary: Path to local or remote file
    title: 'API Key: URL'
- api_issuer: ""
  opts:
    description: 'Issuer ID. Required if **API Key: URL** (`api_key_path`) is specified.'
    title: 'API Key: Issuer ID'
- itunescon_user: ""
  opts:
    description: Email for Apple ID login.
    is_sensitive: true
    summary: Email for Apple ID login.
    title: 'Apple ID: Email'
- opts:
    description: Password for the specified Apple ID.
    is_sensitive: true
    title: 'Apple ID: Password'
  password: ""
- app_password: ""
  opts:
    description: |-
      Use this input if TFA is enabled on the Apple ID but no app-specific password has been added to the used Bitrise Apple ID connection.

      **NOTE:** Application-specific passwords can be created on the
      [AppleID Website](https://appleid.apple.com). It can be used to
      bypass two-factor authentication.
    is_sensitive: true
    summary: Optional if using two-factor enabled Apple ID.
    title: 'Apple ID: Application-specific password'
- ipa_path: $BITRISE_IPA_PATH
  opts:
    description: |-
      Path to your IPA file to be deployed.
      **NOTE:** This input or `PKG path` is required.
    title: IPA path
- opts:
    description: |-
      Path to your PKG file to be deployed.
      **NOTE:** This input or `IPA path` is required.
    title: PKG path
  pkg_path: $BITRISE_PKG_PATH
- opts:
    description: Specify the platform of the file. When `auto` is selected the step
      uses the `Info.plist` to set the platform.
    title: Platform
    value_options:
    - auto
    - ios
    - macos
    - tvos
  platform: auto
- opts:
    description: Retry times when failed, set to `0` for infinite retry
    title: Retry times
  retries: "10"
- altool_options: null
  opts:
    category: Debug
    description: |-
      Options added to the end of the `altool` call.
      You can use multiple options, separated by a space
      character. Example: `--notarize-app --asc-provider" <<provider_id>>`
    title: Additional options for `altool` call
